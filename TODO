- would the (in particular) Step.consume logic be simplified
  if I inserted a character into the zipper on error and then
  deleted them with backspaces?  Exercise.moveZipper would prob
  have to become updateZipper which in turn would insert or
  remove items as well as move the zipper - prob
      |> addIfError
      |> moveZipper
      |> removeIfCorrected
  actually things added on error should go before the cursor and
  the cursor moved back one so corrections are handled in the
  same way as normally typed characters (apart from needing removing
  as they are corrected)

  ...actually am I using the best data structure - perhaps if I used
  a tree zipper I could end up with a tree that represents the
  whole exercise for later analysis and leaves me with cleaner code
  to navigate it whilst typing.  It would 'just' need nodes adding to
  it whenever errors are typed...

  tomjkidd/elm-multiway-tree-zipper - might do the trick :)

- add a timer
  - print wpm
  - show the time mins : secs on screen whilst exercise is
    in progress
- does it work with multi-line strings?
  - how to show <CR> (and don't count them
    in character count)
  - ignore whitespace at start of a line
  - use code as the source
- API & back end
  - serve exercise from a back end
  - save stats to a back end
- navigation - meaningful urls
- pretty-fication
- show stats summaries
  - graph over time of accuracy and wpm
- calculate statistics
  - save tuples of (expected, actual) for mis-types
      - only do this for the first mistake if there are more
        than one mistakes in a row
  - print which characters you got wrong


done
====
- hardcode a basic input string
- show in code block as spans class "outstanding" (gray)
- have first character class "current" (background yellow)
- read keyboard input & advance current character class when letter typed
- only advance if correct letter typed
- show red if incorrect letter typed
- see if grouping each letter with a status makes things simpler
- why can't I correct the last chracter?
- backspaces go back
- track how many errored characters have been typed
- require backspace(s) after errors
- don't handle backspaces separately
- could I put a movement element in the Chunk
- add a safeZipper that doesn't exceed it's bounds
- use Forward | Backward | Still for Chunk.next
- simplify Script.moveZipper (using the above)
- rename Script.chunks -> Script.toList
- rename Script.tick -> Script.consume (ditto for Chunk)
- simplify Script.setCurrentStatus (if I can work out how)
- detect if finished - print completion message on the screen
- should I rename Script -> Exercise
    && Chunk -> Step
    && Script.workbook -> Script.steps
    && Script.toList -> Script.steps
- calculate statistics
  - save the total number of mis-typed characters (excluding backspaces)
  - print accuracy
- improved readme
