- elm style elements
  - pretty-fication
- syntax highlighting
  - https://ourcodeworld.com/articles/read/140/top-5-best-code-syntax-highlighter-javascript-plugins
  - https://github.com/ccampbell/rainbow
  - http://help.blumentals.net/webuilder/customizing/parsers/parsers_doc.htm
  - how does vim do it?
    - http://learnvimscriptthehardway.stevelosh.com/chapters/45.html
    - https://github.com/asvd/microlight
    - https://github.com/dasmurphy/microlighted
- upload multiple examples of different languages and get it to pick sections
  of the code for an exercise (so they are different each time).  Get it to
  size according to how long you want your exercise to be.
- ignore comments
- add language identifier so can see stats on a per language basis as well
  as per exercise
- keep clock at foot of page if exercise is longer than a page
- use local storage for exercises and stats
  - export and import
- upload new exercise
  - current processing used in vim to get file in right format is:
      - :%s/"/\\"/g
      - :%s/\n/\\n/g
      - should also need to do something to escape "\" characters if
        the file contains them...
- how to show a loading state when the page is drawn but we're waiting for
  data from the backend (have been some discussions/posts on this recently)
- [Rob, Joe, Tom] show characters wot are mis-typed as they are entered
- auto-pause the timer if nothing typed for a while
- track slow characters (as in slow to type)
- don't get the exercise contents when getting the list of exercies
  just get it when you start the exercise
- calculate statistics
  - show which characters you got wrong


done
====
- hardcode a basic input string
- show in code block as spans class "outstanding" (gray)
- have first character class "current" (background yellow)
- read keyboard input & advance current character class when letter typed
- only advance if correct letter typed
- show red if incorrect letter typed
- see if grouping each letter with a status makes things simpler
- why can't I correct the last chracter?
- backspaces go back
- track how many errored characters have been typed
- require backspace(s) after errors
- don't handle backspaces separately
- could I put a movement element in the Chunk
- add a safeZipper that doesn't exceed it's bounds
- use Forward | Backward | Still for Chunk.next
- simplify Script.moveZipper (using the above)
- rename Script.chunks -> Script.toList
- rename Script.tick -> Script.consume (ditto for Chunk)
- simplify Script.setCurrentStatus (if I can work out how)
- detect if finished - print completion message on the screen
- should I rename Script -> Exercise
    && Chunk -> Step
    && Script.workbook -> Script.steps
    && Script.toList -> Script.steps
- calculate statistics
  - save the total number of mis-typed characters (excluding backspaces)
  - print accuracy
- improved readme
- add a timer
  - show time taken
  - print wpm
  - show the time mins : secs on screen whilst exercise is in progress
- does it work with multi-line strings?
  - ignore whitespace at start of a line
- use some elm code as the source
- have an example in a file
- navigation - meaningful urls
- API & back end
  - serve list of exercises from the back end
  - serve exercise from a back end
- BUG - the api is serving up lines with trailling whitespace
  should make it so that if it does it is removed...
- Exercise tests need updating
- save attempts to a back end
- save current time when creating an attempt
  - http://stackoverflow.com/questions/38021777/how-do-i-get-the-current-time-in-elm-0-17
- BUG -> can get accuaracy of over 100% - perhaps it's cause I'm
  counting leading whitespace as a character??
- BUG -> if empty lines contain whitespace it is not removed when
         showing the exercise (try the elm exercise to see this)
- BUG -> doesn't like whitespace at the start of the first line
         - needs to set current to the first real character
           and the zipper too
- BUG (probably) it should start in the right place if ther are
  blank lines at the start of the exercise
- better combining of parsers perhaps using andMap instead of
  map & List.concatMap
- remove ExampleExercise
- move event stream into Attempt
- move wpm and accuracy calcs into Attempt
- add tests that the event stream ignores Skip's
- set the styles based purely on the event stream
- bug (I think) - accuracy calcs are wrong - if I mistype a letter
  then type the correct one the maths will be wrong...
- Remove the need for many of the different status's of character
  - should just need Untyepables - Skip, End and Typeable - Char
- does step need moveto?
- no more need for Zipper for the steps - although will have to do something
  equivalentish to the SafeZipper for event replay....
- can I just create the zipper on demand and only save the text on the model?
- event stream re-design
  - with no zipper, can I represent the steps as a List Line, where each
    Line is a List Step - leave this for now
  - review code - is it better, can it be made simpler?
  - is the End status actually needed? - could probably loose it but not
    a big enough deal for now - better to get some more features in place...
- make Step a union type of Typeable Char | Skip String | End
- Msg remove commented out message
- Model.exercise should be a MaybeExercise
- Event.actual should be a Char (called character)
- Exercise.followEvents - rename func to something more meaningful
- Routes - move routes and urlFor up the file
- [BUG] need to prevent default on typed characters
- show stats summaries
  - graph over time of accuracy and wpm
- [Rob, Tom] advance the cursor whilst mis-typing so you can
  see how many backspaces you need to type
- [BUG] tooltip on graph shows epoc time not formatted time
- scrolling when exercise is longer than the viewport
- stop the Tick when not doing an exercise
